gb.repository = repository
gb.owner = owner
gb.description = description
gb.lastChange = last change
gb.refs = refs
gb.tag = tag
gb.tags = tags
gb.author = author
gb.committer = committer
gb.commit = commit
gb.age = age
gb.tree = tree
gb.parent = parent
gb.url = URL
gb.history = history
gb.raw = raw
gb.object = object
gb.ticketId = ticket id
gb.ticketAssigned = assigned
gb.ticketOpenDate = open date
gb.ticketStatus = status
gb.ticketComments = comments
gb.view = view
gb.local = local
gb.remote = remote
gb.branches = branches
gb.patch = patch
gb.diff = diff
gb.log = log
gb.moreLogs = more commits...
gb.allTags = all tags...
gb.allBranches = all branches...
gb.summary = summary
gb.ticket = ticket
gb.newRepository = new repository
gb.newUser = new user
gb.commitdiff = commitdiff
gb.tickets = tickets
gb.pageFirst = first
gb.pagePrevious = prev
gb.pageNext = next
gb.head = HEAD
gb.blame = blame
gb.login = login
gb.logout = logout
gb.username = username
gb.password = password
gb.tagger = tagger
gb.moreHistory = more history...
gb.difftocurrent = diff to current
gb.search = search
gb.searchForAuthor = Search for commits authored by
gb.searchForCommitter = Search for commits committed by
gb.addition = addition
gb.modification = modification
gb.deletion = deletion
gb.rename = rename
gb.metrics = metrics
gb.stats = stats
gb.markdown = markdown
gb.changedFiles = changed files
gb.filesAdded = {0} files added
gb.filesModified = {0} files modified
gb.filesDeleted = {0} files deleted
gb.filesCopied = {0} files copied
gb.filesRenamed = {0} files renamed
gb.missingUsername = Missing Username
gb.edit = edit
gb.searchTypeTooltip = Select Search Type
gb.searchTooltip = Search {0}
gb.delete = delete
gb.docs = docs
gb.accessRestriction = access restriction
gb.name = name
gb.enableTickets = enable tickets
gb.enableDocs = enable docs
gb.save = save
gb.showRemoteBranches = show remote branches
gb.editUsers = edit users
gb.confirmPassword = confirm password
gb.restrictedRepositories = restricted repositories
gb.canAdmin = can admin
gb.notRestricted = anonymous view, clone, & push
gb.pushRestricted = authenticated push
gb.cloneRestricted = authenticated clone & push
gb.viewRestricted = authenticated view, clone, & push
gb.useTicketsDescription = readonly, distributed Ticgit issues
gb.useDocsDescription = enumerates Markdown documentation in repository
gb.showRemoteBranchesDescription = show remote branches
gb.canAdminDescription = can administer Gitblit server
gb.permittedUsers = permitted users
gb.isFrozen = is frozen
gb.isFrozenDescription = deny push operations
gb.zip = zip
gb.showReadme = show readme
gb.showReadmeDescription = show a \"readme\" Markdown file on the summary page
gb.nameDescription = use '/' to group repositories.  e.g. libraries/mycoollib.git
gb.ownerDescription = the owner may edit repository settings
gb.blob = blob
gb.commitActivityTrend = commit activity trend
gb.commitActivityDOW = commit activity by day of week
gb.commitActivityAuthors = primary authors by commit activity
gb.feed = feed
gb.cancel = cancel
gb.changePassword = change password
gb.isFederated = is federated
gb.federateThis = federate this repository
gb.federateOrigin = federate the origin
gb.excludeFromFederation = exclude from federation
gb.excludeFromFederationDescription = block federated Gitblit instances from pulling this account
gb.tokens = federation tokens
gb.tokenAllDescription = all repositories, users, & settings
gb.tokenUnrDescription = all repositories & users
gb.tokenJurDescription = all repositories
gb.federatedRepositoryDefinitions = repository definitions
gb.federatedUserDefinitions = user definitions
gb.federatedSettingDefinitions = setting definitions
gb.proposals = federation proposals
gb.received = received
gb.type = type
gb.token = token
gb.repositories = repositories
gb.proposal = proposal
gb.frequency = frequency
gb.folder = folder
gb.lastPull = last pull
gb.nextPull = next pull
gb.inclusions = inclusions
gb.exclusions = exclusions
gb.registration = registration
gb.registrations = federation registrations
gb.sendProposal = propose
gb.status = status
gb.origin = origin
gb.headRef = default branch (HEAD)
gb.headRefDescription = The default branch that will be cloned and displayed on the Summary page.
gb.federationStrategy = federation strategy
gb.federationRegistration = federation registration
gb.federationResults = federation pull results
gb.federationSets = federation sets
gb.message = message
gb.myUrlDescription = the publicly accessible url for your Gitblit instance
gb.destinationUrl = send to
gb.destinationUrlDescription = the url of the Gitblit instance to send your proposal
gb.users = users
gb.federation = federation
gb.error = error
gb.refresh = refresh
gb.browse = browse
gb.clone = clone
gb.filter = filter
gb.create = create
gb.servers = servers
gb.recent = recent
gb.available = available
gb.selected = selected
gb.size = size
gb.downloading = downloading
gb.loading = loading
gb.starting = starting
gb.general = general
gb.settings = settings
gb.manage = manage
gb.lastLogin = last login
gb.skipSizeCalculation = skip size calculation
gb.skipSizeCalculationDescription = do not calculate the repository size (reduces page load time)
gb.skipSummaryMetrics = skip summary metrics
gb.skipSummaryMetricsDescription = do not calculate metrics on the summary page (reduces page load time)
gb.accessLevel = access level
gb.default = default
gb.setDefault = set default
gb.since = since
gb.status = status
gb.bootDate = boot date
gb.servletContainer = servlet container
gb.heapMaximum = maximum heap
gb.heapAllocated = allocated heap
gb.heapUsed = used heap
gb.free = free
gb.version = version
gb.releaseDate = release date
gb.date = date
gb.activity = activity
gb.subscribe = subscribe
gb.branch = branch
gb.maxHits = max hits
gb.recentActivity = recent activity
gb.recentActivityStats = last {0} days / {1} commits by {2} authors
gb.recentActivityNone = last {0} days / none
gb.dailyActivity = daily activity
gb.activeRepositories = active repositories
gb.activeAuthors = active authors
gb.commits = commits
gb.teams = teams
gb.teamName = team name
gb.teamMembers = team members
gb.teamMemberships = team memberships
gb.newTeam = new team
gb.permittedTeams = permitted teams
gb.emptyRepository = empty repository
gb.repositoryUrl = repository url
gb.mailingLists = mailing lists
gb.preReceiveScripts = pre-receive scripts
gb.postReceiveScripts = post-receive scripts
gb.hookScripts = hook scripts
gb.customFields = custom fields
gb.customFieldsDescription = custom fields available to Groovy hooks
gb.accessPermissions = access permissions
gb.filters = filters
gb.generalDescription = common settings
gb.accessPermissionsDescription = restrict access by users and teams
gb.accessPermissionsForUserDescription = set team memberships or grant access to specific restricted repositories
gb.accessPermissionsForTeamDescription = set team members and grant access to specific restricted repositories
gb.federationRepositoryDescription = share this repository with other Gitblit servers
gb.hookScriptsDescription = run Groovy scripts on pushes to this Gitblit server
gb.reset = reset
gb.pages = pages
gb.workingCopy = working copy
gb.workingCopyWarning = this repository has a working copy and can not receive pushes
gb.query = query
gb.queryHelp = Standard query syntax is supported.<p/><p/>Please see ${querySyntax} for details.
gb.querySyntax = Lucene Query Parser Syntax
gb.queryResults = results {0} - {1} ({2} hits)
gb.noHits = no hits
gb.authored = authored
gb.committed = committed
gb.indexedBranches = Indexed Branches
gb.indexedBranchesDescription = Select the branches to be indexed by Lucene
gb.noIndexedRepositoriesWarning = none of your repositories are configured for Lucene indexing
gb.undefinedQueryWarning = query is undefined!
gb.noSelectedRepositoriesWarning = please select one or more repositories!
gb.luceneDisabled = Lucene indexing is disabled
gb.failedtoRead = Failed to read
gb.isNotValidFile = is not a valid file
gb.failedToReadMessage = Failed to read default message from {0}!
gb.passwordsDoNotMatch = Passwords do not match!
gb.passwordTooShort = Password is too short. Minimum length is {0} characters.
gb.passwordChanged = Password successfully changed.
gb.passwordChangeAborted = Password change aborted.
gb.pleaseSetRepositoryName = Please set repository name!
gb.illegalLeadingSlash = Leading root folder references (/) are prohibited.
gb.illegalRelativeSlash = Relative folder references (../) are prohibited.
gb.illegalCharacterRepositoryName = Illegal character ''{0}'' in repository name!
gb.selectAccessRestriction = Please select access restriction!
gb.selectFederationStrategy = Please select federation strategy!
gb.pleaseSetTeamName = Please enter a teamname!
gb.teamNameUnavailable = Team name ''{0}'' is unavailable.
gb.teamMustSpecifyRepository = A team must specify at least one repository.
gb.teamCreated = New team ''{0}'' successfully created.
gb.pleaseSetUsername = Please enter a username!
gb.usernameUnavailable = Username ''{0}'' is unavailable.
gb.combinedMd5Rename = Gitblit is configured for combined-md5 password hashing. You must enter a new password on account rename.
gb.userCreated = New user ''{0}'' successfully created.
gb.couldNotFindFederationRegistration = Could not find federation registration!
gb.failedToFindGravatarProfile = Failed to find Gravatar profile for {0}
gb.branchStats = {0} commits and {1} tags in {2}
gb.repositoryNotSpecified = Repository not specified!
gb.repositoryNotSpecifiedFor = Repository not specified for {0}!
gb.canNotLoadRepository = Can not load repository
gb.commitIsNull = Commit is null
gb.unauthorizedAccessForRepository = Unauthorized access for repository
gb.failedToFindCommit = Failed to find commit \"{0}\" in {1}!
gb.couldNotFindFederationProposal = Could not find federation proposal!
gb.invalidUsernameOrPassword = Invalid username or password!
gb.OneProposalToReview = There is 1 federation proposal awaiting review.
gb.nFederationProposalsToReview = There are {0} federation proposals awaiting review.
gb.couldNotFindTag = Could not find tag {0}
gb.couldNotCreateFederationProposal = Could not create federation proposal!
gb.pleaseSetGitblitUrl = Please enter your Gitblit url!
gb.pleaseSetDestinationUrl = Please enter a destination url for your proposal!
gb.proposalReceived = Proposal successfully received by {0}.
gb.noGitblitFound = Sorry, {0} could not find a Gitblit instance at {1}.
gb.noProposals = Sorry, {0} is not accepting proposals at this time.
gb.noFederation = Sorry, {0} is not configured to federate with any Gitblit instances.
gb.proposalFailed = Sorry, {0} did not receive any proposal data!
gb.proposalError = Sorry, {0} reports that an unexpected error occurred!
gb.failedToSendProposal = Failed to send proposal!
gb.userServiceDoesNotPermitAddUser = {0} does not permit adding a user account!
gb.userServiceDoesNotPermitPasswordChanges = {0} does not permit password changes!
gb.displayName = display name
gb.emailAddress = email address
gb.errorAdminLoginRequired = Administration requires a login
gb.errorOnlyAdminMayCreateRepository = Only an administrator may create a repository
gb.errorOnlyAdminOrOwnerMayEditRepository = Only an administrator or the owner may edit a repository
gb.errorAdministrationDisabled = Administration is disabled
gb.lastNDays = last {0} days
gb.completeGravatarProfile = Complete profile on Gravatar.com
gb.none = none
gb.line = line
gb.content = content
gb.empty = empty
gb.inherited = inherited
gb.deleteRepository = Delete repository \"{0}\"?
gb.repositoryDeleted = Repository ''{0}'' deleted.
gb.repositoryDeleteFailed = Failed to delete repository ''{0}''!
gb.deleteUser = Delete user \"{0}\"?
gb.userDeleted = User ''{0}'' deleted.
gb.userDeleteFailed = Failed to delete user ''{0}''!
gb.time.justNow = just now
gb.time.today = today
gb.time.yesterday = yesterday
gb.time.minsAgo = {0} mins ago
gb.time.hoursAgo = {0} hours ago
gb.time.daysAgo = {0} days ago
gb.time.weeksAgo = {0} weeks ago
gb.time.monthsAgo = {0} months ago
gb.time.oneYearAgo = 1 year ago
gb.time.yearsAgo = {0} years ago
gb.duration.oneDay = 1 day
gb.duration.days = {0} days
gb.duration.oneMonth = 1 month
gb.duration.months = {0} months
gb.duration.oneYear = 1 year
gb.duration.years = {0} years
gb.authorizationControl = authorization control
gb.allowAuthenticatedDescription = grant RW+ permission to all authenticated users
gb.allowNamedDescription = grant fine-grained permissions to named users or teams
gb.markdownFailure = Failed to parse Markdown content!
gb.clearCache = clear cache
gb.projects = projects
gb.project = project
gb.allProjects = all projects
gb.copyToClipboard = copy to clipboard
gb.fork = fork
gb.forks = forks
gb.forkRepository = fork {0}?
gb.repositoryForked = {0} has been forked
gb.repositoryForkFailed= fork has failed
gb.personalRepositories = personal repositories
gb.allowForks = allow forks
gb.allowForksDescription = allow authorized users to fork this repository
gb.forkedFrom = forked from
gb.canFork = can fork
gb.canForkDescription = can fork authorized repositories to personal repositories
gb.myFork = view my fork
gb.forksProhibited = forks prohibited
gb.forksProhibitedWarning = this repository forbids forks
gb.noForks = {0} has no forks
gb.forkNotAuthorized = sorry, you are not authorized to fork {0}
gb.forkInProgress = fork in progress
gb.preparingFork = preparing your fork...
gb.isFork = is fork
gb.canCreate = can create
gb.canCreateDescription = can create personal repositories
gb.illegalPersonalRepositoryLocation = your personal repository must be located at \"{0}\"
gb.verifyCommitter = verify committer
gb.verifyCommitterDescription = require committer identity to match pushing Gitblit user account
gb.verifyCommitterNote = all merges require "--no-ff" to enforce committer identity
gb.repositoryPermissions = repository permissions
gb.userPermissions = user permissions
gb.teamPermissions = team permissions
gb.add = add
gb.noPermission = DELETE THIS PERMISSION
gb.excludePermission = {0} (exclude)
gb.viewPermission = {0} (view)
gb.clonePermission = {0} (clone)
gb.pushPermission = {0} (push)
gb.createPermission = {0} (push, ref creation)
gb.deletePermission = {0} (push, ref creation+deletion)
gb.rewindPermission = {0} (push, ref creation+deletion+rewind)
gb.permission = permission
gb.regexPermission = this permission is set from regular expression \"{0}\"
gb.accessDenied = access denied
gb.busyCollectingGarbage = sorry, Gitblit is busy collecting garbage in {0}
gb.gcPeriod = GC period
gb.gcPeriodDescription = duration between garbage collections
gb.gcThreshold = GC threshold
gb.gcThresholdDescription = minimum total size of loose objects to trigger early garbage collection
gb.ownerPermission = repository owner
gb.administrator = admin
gb.administratorPermission = Gitblit administrator
gb.team = team
gb.teamPermission = permission set by \"{0}\" team membership
gb.missing = missing!
gb.missingPermission = the repository for this permission is missing!
gb.mutable = mutable
gb.specified = specified
gb.effective = effective
gb.organizationalUnit = organizational unit
gb.organization = organization
gb.locality = locality
gb.stateProvince = state or province
gb.countryCode = country code
gb.properties = properties
gb.issued = issued
gb.expires = expires
gb.expired = expired
gb.expiring = expiring
gb.revoked = revoked
gb.serialNumber = serial number
gb.certificates = certificates
gb.newCertificate = new certificate
gb.revokeCertificate = revoke certificate
gb.sendEmail = send email
gb.passwordHint = password hint
gb.ok = ok
gb.invalidExpirationDate = invalid expiration date!
gb.passwordHintRequired = password hint required!
gb.viewCertificate = view certificate
gb.subject = subject
gb.issuer = issuer
gb.validFrom = valid from
gb.validUntil = valid until
gb.publicKey = public key
gb.signatureAlgorithm = signature algorithm
gb.sha1FingerPrint = SHA-1 Fingerprint
gb.md5FingerPrint = MD5 Fingerprint
gb.reason = reason
gb.revokeCertificateReason = Please select a reason for certificate revocation
gb.unspecified = unspecified
gb.keyCompromise = key compromise
gb.caCompromise = CA compromise
gb.affiliationChanged = affiliation changed
gb.superseded = superseded
gb.cessationOfOperation = cessation of operation
gb.privilegeWithdrawn = privilege withdrawn
gb.time.inMinutes = in {0} mins
gb.time.inHours = in {0} hours
gb.time.inDays = in {0} days
gb.hostname = hostname
gb.hostnameRequired = Please enter a hostname
gb.newSSLCertificate = new server SSL certificate
gb.newCertificateDefaults = new certificate defaults
gb.duration = duration
gb.certificateRevoked = Certificate {0,number,0} has been revoked
gb.clientCertificateGenerated = Successfully generated new client certificate for {0}
gb.sslCertificateGenerated = Successfully generated new server SSL certificate for {0}
gb.newClientCertificateMessage = NOTE:\nThe 'password' is not the user's password, it is the password to protect the user's keystore.  This password is not saved so you must also enter a 'hint' which will be included in the user's README instructions.
gb.certificate = certificate
gb.emailCertificateBundle = email client certificate bundle
gb.pleaseGenerateClientCertificate = Please generate a client certificate for {0}
gb.clientCertificateBundleSent = Client certificate bundle for {0} sent
gb.enterKeystorePassword = Please enter the Gitblit keystore password
gb.warning = warning
gb.jceWarning = Your Java Runtime Environment does not have the \"JCE Unlimited Strength Jurisdiction Policy\" files.\nThis will limit the length of passwords you may use to encrypt your keystores to 7 characters.\nThese policy files are an optional download from Oracle.\n\nWould you like to continue and generate the certificate infrastructure anyway?\n\nAnswering No will direct your browser to Oracle's download page so that you may download the policy files.
gb.maxActivityCommits = max activity commits
gb.maxActivityCommitsDescription = maximum number of commits to contribute to the Activity page
gb.noMaximum = no maximum
gb.attributes = attributes
gb.serveCertificate = serve https with this certificate
gb.sslCertificateGeneratedRestart = Successfully generated new server SSL certificate for {0}.\nYou must restart Gitblit to use the new certificate.\n\nIf you are launching with the '--alias' parameter you will have to set that to ''--alias {0}''.
gb.validity = validity
gb.siteName = site name
gb.siteNameDescription = short, descriptive name of your server
gb.excludeFromActivity = exclude from activity page
gb.isSparkleshared = repository is Sparkleshared
gb.owners = owners
gb.sessionEnded = Session has been closed
gb.closeBrowser = Please close the browser to properly end the session.
gb.doesNotExistInTree = {0} does not exist in tree {1}
gb.enableIncrementalPushTags = enable incremental push tags
gb.useIncrementalPushTagsDescription = on push, automatically tag each branch tip with an incremental revision number
gb.incrementalPushTagMessage = Auto-tagged [{0}] branch on push
gb.externalPermissions = {0} access permissions are externally maintained
gb.viewAccess = You do not have Gitblit read or write access
gb.overview = overview
gb.dashboard = dashboard
gb.monthlyActivity = monthly activity
gb.myProfile = my profile
gb.compare = compare
gb.manual = manual
gb.from = from
gb.to = to
gb.at = at
gb.of = of
gb.in = in
gb.moreChanges = all changes...
gb.pushedNCommitsTo = pushed {0} commits to
gb.pushedOneCommitTo = pushed 1 commit to
gb.commitsTo = {0} commits to
gb.oneCommitTo = 1 commit to
gb.byNAuthors = by {0} authors
gb.byOneAuthor = by {0}
gb.viewComparison = view comparison of these {0} commits \u00bb
gb.nMoreCommits = {0} more commits \u00bb
gb.oneMoreCommit = 1 more commit \u00bb
gb.pushedNewTag = pushed new tag
gb.createdNewTag = created new tag
gb.deletedTag = deleted tag
gb.pushedNewBranch = pushed new branch
gb.createdNewBranch = created new branch
gb.deletedBranch = deleted branch
gb.createdNewPullRequest = created pull request
gb.mergedPullRequest = merged pull request
gb.rewind = REWIND
gb.star = star
gb.unstar = unstar
gb.stargazers = stargazers
gb.starredRepositories = starred repositories
gb.failedToUpdateUser = Failed to update user account!
gb.myRepositories = my repositories
gb.noActivity = there has been no activity in the last {0} days
gb.findSomeRepositories = find some repositories
gb.metricAuthorExclusions = author metric exclusions
gb.myDashboard = my dashboard
gb.failedToFindAccount = failed to find user account ''{0}''
gb.reflog = reflog
gb.active = active
gb.starred = starred
gb.owned = owned
gb.starredAndOwned = starred & owned
gb.reviewPatchset = review {0} patchset {1}
gb.todaysActivityStats = today / {1} commits by {2} authors
gb.todaysActivityNone = today / none
gb.noActivityToday = there has been no activity today
gb.anonymousUser= anonymous
gb.commitMessageRenderer = commit message renderer
gb.diffStat = {0} insertions & {1} deletions
gb.home = home
gb.isMirror = this repository is a mirror
gb.mirrorOf = mirror of {0}
gb.mirrorWarning = this repository is a mirror and can not receive pushes
gb.docsWelcome1 = You can use docs to document your repository.
gb.docsWelcome2 = Commit a README.md or a HOME.md file to get started.
gb.createReadme = create a README
gb.responsible = responsible
gb.createdThisTicket = created this ticket
gb.proposedThisChange = proposed this change
gb.uploadedPatchsetN = uploaded patchset {0}
gb.uploadedPatchsetNRevisionN = uploaded patchset {0} revision {1}
gb.mergedPatchset = merged patchset
gb.commented = commented
gb.noDescriptionGiven = no description given
gb.toBranch = to {0}
gb.createdBy = created by
gb.oneParticipant = {0} participant
gb.nParticipants = {0} participants
gb.noComments = no comments
gb.oneComment = {0} comment
gb.nComments = {0} comments
gb.oneAttachment  = {0} attachment
gb.nAttachments = {0} attachments
gb.milestone = milestone
gb.compareToMergeBase = compare to merge base
gb.compareToN = compare to {0}
gb.open = open
gb.closed = closed
gb.merged = merged
gb.ticketPatchset = ticket {0}, patchset {1}
gb.patchsetMergeable = This patchset can be automatically merged into {0}.
gb.patchsetMergeableMore = This patchset may also be merged into {0} from the command line.
gb.patchsetAlreadyMerged = This patchset has been merged into {0}.
gb.patchsetNotMergeable = This patchset can not be automatically merged into {0}.
gb.patchsetNotMergeableMore = This patchset must be rebased or manually merged into {0} to resolve conflicts.
gb.patchsetNotApproved = This patchset revision has not been approved for merging into {0}.
gb.patchsetNotApprovedMore = A reviewer must approve this patchset.
gb.patchsetVetoedMore = A reviewer has vetoed this patchset.
gb.write = write
gb.comment = comment
gb.preview = preview
gb.leaveComment = leave a comment...
gb.showHideDetails = show/hide details
gb.acceptNewPatchsets = accept patchsets
gb.acceptNewPatchsetsDescription = accept patchsets pushed to this repository
gb.acceptNewTickets = allow new tickets
gb.acceptNewTicketsDescription = allow creation of bug, enhancement, task ,etc tickets
gb.requireApproval = require approvals
gb.requireApprovalDescription = patchsets must be approved before merge button is enabled
gb.topic = topic
gb.proposalTickets = proposed changes
gb.bugTickets = bugs
gb.enhancementTickets = enhancements
gb.taskTickets = tasks
gb.questionTickets = questions
gb.maintenanceTickets = maintenance
gb.requestTickets = enhancements & tasks
gb.yourCreatedTickets = created by you
gb.yourWatchedTickets = watched by you
gb.mentionsMeTickets = mentioning you
gb.updatedBy = updated by
gb.sort = sort
gb.sortNewest = newest
gb.sortOldest = oldest
gb.sortMostRecentlyUpdated = recently updated
gb.sortLeastRecentlyUpdated = least recently updated
gb.sortMostComments = most comments
gb.sortLeastComments = least comments
gb.sortMostPatchsetRevisions = most patchset revisions
gb.sortLeastPatchsetRevisions = least patchset revisions
gb.sortMostVotes = most votes
gb.sortLeastVotes = least votes
gb.topicsAndLabels = topics & labels
gb.milestones = milestones
gb.noMilestoneSelected = no milestone selected
gb.notSpecified = not specified
gb.due = due
gb.queries = queries
gb.searchTicketsTooltip = search {0} tickets
gb.searchTickets = search tickets
gb.new = new
gb.newTicket = new ticket
gb.editTicket = edit ticket
gb.ticketsWelcome = You can use tickets to organize your todo list, discuss bugs, and to collaborate on patchsets.
gb.createFirstTicket = create your first ticket
gb.title = title
gb.changedStatus = changed the status
gb.discussion = discussion
gb.updated = updated
gb.proposePatchset = propose a patchset
gb.proposePatchsetNote = You are welcome to propose a patchset for this ticket.
gb.proposeInstructions = To start, craft a patchset and upload it with Git.  Gitblit will link your patchset to this ticket by the id.
gb.proposeWith = propose a patchset with {0}
gb.revisionHistory = revision history
gb.merge = merge
gb.action = action
gb.patchset = patchset
gb.all = all
gb.mergeBase = merge base
gb.checkout = checkout
gb.checkoutViaCommandLine =  Checkout via command line
gb.checkoutViaCommandLineNote = You can checkout and test these changes locally from your clone of this repository.
gb.checkoutStep1 = Fetch the current patchset \u2014 run this from your project directory
gb.checkoutStep2 = Checkout the patchset to a new branch and review
gb.mergingViaCommandLine = Merging via command line
gb.mergingViaCommandLineNote = If you do not want to use the merge button or an automatic merge cannot be performed, you can perform a manual merge on the command line.
gb.mergeStep1 = Check out a new branch to review the changes \u2014 run this from your project directory
gb.mergeStep2 = Bring in the proposed changes and review
gb.mergeStep3 = Merge the proposed changes and update the server
gb.download = download
gb.ptDescription = the Gitblit patchset tool
gb.ptCheckout = Fetch & checkout the current patchset to a review branch
gb.ptMerge = Fetch & merge the current patchset into your local branch
gb.ptDescription1 = Barnum is a command-line companion for Git that simplifies the syntax for working with Gitblit Tickets and Patchsets.
gb.ptSimplifiedCollaboration = simplified collaboration syntax
gb.ptSimplifiedMerge = simplified merge syntax
gb.ptDescription2 = Barnum requires Python 3 and native Git.  It runs on Windows, Linux, and Mac OS X.
gb.stepN = Step {0}
gb.watchers = watchers
gb.votes = votes
gb.vote = vote for this {0}
gb.watch = watch this {0}
gb.removeVote = remove vote
gb.stopWatching = stop watching
gb.watching = watching
gb.comments = comments
gb.addComment = add comment
gb.export = export
gb.oneCommit = one commit
gb.nCommits = {0} commits
gb.addedOneCommit = added 1 commit
gb.addedNCommits = added {0} commits
gb.commitsInPatchsetN = commits in patchset {0}
gb.patchsetN = patchset {0}
gb.reviewedPatchsetRev = reviewed patchset {0} revision {1}: {2}
gb.review = review
gb.reviews = reviews
gb.veto = veto 
gb.needsImprovement = needs improvement
gb.looksGood = looks good
gb.approve = approve
gb.hasNotReviewed = has not reviewed
gb.about = about
gb.ticketN = ticket #{0}
gb.disableUser = disable user
gb.disableUserDescription = prevent this account from authenticating
gb.any = any
gb.milestoneProgress = {0} open, {1} closed
gb.nOpenTickets = {0} open
gb.nClosedTickets = {0} closed
gb.nTotalTickets = {0} total
gb.body = body
gb.mergeSha = mergeSha
gb.mergeTo = merge to
gb.mergeType = merge type
gb.labels = labels
gb.reviewers = reviewers
gb.voters = voters
gb.mentions = mentions
gb.canNotProposePatchset = can not propose a patchset
gb.repositoryIsMirror = This repository is a read-only mirror.
gb.repositoryIsFrozen = This repository is frozen.
gb.repositoryDoesNotAcceptPatchsets = This repository does not accept patchsets.
gb.serverDoesNotAcceptPatchsets = This server does not accept patchsets.
gb.ticketIsClosed = This ticket is closed.
gb.mergeToDescription = default integration branch for merging ticket patchsets
gb.mergeTypeDescription = merge a ticket fast-forward only, if necessary, or always with a merge commit to the integration branch
gb.anonymousCanNotPropose = Anonymous users can not propose patchsets.
gb.youDoNotHaveClonePermission = You are not permitted to clone this repository.
gb.myTickets = my tickets
gb.yourAssignedTickets = assigned to you
gb.newMilestone = new milestone
gb.editMilestone = edit milestone
gb.deleteMilestone = Delete milestone \"{0}\"?
gb.milestoneDeleteFailed = Failed to delete milestone ''{0}''!
gb.notifyChangedOpenTickets = send notification for changed open tickets
gb.overdue = overdue
gb.openMilestones = open milestones
gb.closedMilestones = closed milestones
gb.administration = administration
gb.plugins = plugins
gb.extensions = extensions
gb.pleaseSelectProject = Please select the project!
gb.accessPolicy = Access Policy
gb.accessPolicyDescription = Choose an access policy to control repository visibility and git permissions.
gb.anonymousPolicy = Anonymous View, Clone, & Push
gb.anonymousPolicyDescription = Anyone can see, clone, and push to this repository.
gb.authenticatedPushPolicy = Restrict Push (Authenticated)
gb.authenticatedPushPolicyDescription = Anyone can see and clone this repository. All authenticated users have RW+ push permission.
gb.namedPushPolicy = Restrict Push (Named)
gb.namedPushPolicyDescription = Anyone can see and clone this repository. You choose who can push.
gb.clonePolicy = Restrict Clone & Push
gb.clonePolicyDescription = Anyone can see this repository. You choose who can clone and push.
gb.viewPolicy  = Restrict View, Clone, & Push
gb.viewPolicyDescription = You choose who can see, clone, and push to this repository.
gb.initialCommit = Initial Commit
gb.initialCommitDescription = This will allow you to <code>git clone</code> this repository immediately. Skip this step if you have already run <code>git init</code> locally.
gb.initWithReadme = Include a README
gb.initWithReadmeDescription = This will generate a simple README document for your repository.
gb.initWithGitignore = Include a .gitignore file
gb.initWithGitignoreDescription = This will insert a config file that instructs your Git clients to ignore files or directories that match defined patterns.
gb.pleaseSelectGitIgnore = Please select a .gitignore file
gb.receive = receive
gb.permissions = permissions
gb.ownersDescription = Owners can manage all repository settings but they are not allowed to rename a repository unless it is their personal repository.
gb.userPermissionsDescription = You can specify individual user permissions. These settings will override team or regex permissions.
gb.teamPermissionsDescription = You can specify individual team permissions. These settings will override regex permissions.
gb.ticketSettings = Ticket Settings
gb.receiveSettings = Receive Settings
gb.receiveSettingsDescription = The receive settings control pushes to the repository.
gb.preReceiveDescription = Pre-receive hooks are executed after commits are received but <em>BEFORE</em> the refs are updated.<p>This is the appropriate hook for rejecting a push.</p>
gb.postReceiveDescription = Post-receive hooks are executed after commits are received but <em>AFTER</em> the refs are updated.<p>This is the appropriate hook for notifications, build triggers, etc.</p>
gb.federationStrategyDescription = Control if and how to federate this repository with another Gitblit.
gb.federationSetsDescription = This repository will be included in the selected federation sets.
gb.miscellaneous = miscellaneous
gb.originDescription = The url from which this repository was cloned.
gb.gc = GC 
gb.garbageCollection = Garbage Collection
gb.garbageCollectionDescription = The garbage collector will pack loose objects pushed from clients and will remove unreferenced objects from the repository.
gb.commitMessageRendererDescription = Commit messages can be displayed as plaintext or as rendered markup.
gb.preferences = preferences
gb.accountPreferences = Account Preferences
gb.accountPreferencesDescription = Specify your account preferences
gb.languagePreference = Language Preference
gb.languagePreferenceDescription = Select your preferred translation for Gitblit
gb.emailMeOnMyTicketChanges = Email me on my ticket changes
gb.emailMeOnMyTicketChangesDescription  = Send me an email notification for changes that I make to a ticket
gb.displayNameDescription = The preferred name for display
gb.emailAddressDescription = The primary email address for receiving notifications
gb.sshKeys = SSH Keys
gb.sshKeysDescription = SSH public key authentication is a secure alternative to password authentication
gb.addSshKey = Add SSH Key
gb.key = Key
gb.comment = Comment
gb.sshKeyCommentDescription = Enter an optional comment. If blank, the comment will be extracted from the key data.
gb.permission = Permission
gb.sshKeyPermissionDescription = Specify the access permission for the SSH key
gb.transportPreference = Transport Preference
gb.transportPreferenceDescription = Set the transport that you prefer to use for cloning
gb.priority = priority
gb.severity = severity
gb.sortHighestPriority = highest priority
gb.sortLowestPriority = lowest priority
gb.sortHighestSeverity = highest severity
gb.sortLowestSeverity = lowest severity
gb.missingIntegrationBranchMore = The target integration branch does not exist in the repository!
gb.diffDeletedFileSkipped = (deleted)
gb.diffFileDiffTooLarge = Diff too large
gb.diffNewFile = New file
gb.diffDeletedFile = File was deleted
gb.diffRenamedFile = File was renamed from {0}
gb.diffCopiedFile = File was copied from {0}
gb.diffTruncated = Diff truncated after the above file
gb.opacityAdjust = Adjust opacity
gb.blinkComparator = Blink comparator
gb.imgdiffSubtract = Subtract (black = identical)
gb.deleteRepositoryHeader = Delete Repository
gb.deleteRepositoryDescription = Deleted repositories will be unrecoverable.
gb.show_whitespace = show whitespace
gb.ignore_whitespace = ignore whitespace
gb.allRepositories = All Repositories
gb.oid = object id
gb.filestore = filestore
gb.filestoreStats = Filestore contains {0} files with a total size of {1}.  ({2} remaining)
gb.statusChangedOn = status changed on
gb.statusChangedBy = status changed by
gb.filestoreHelp = How to use the Filestore?
gb.editFile = edit file
gb.continueEditing = Continue Editing
gb.commitChanges = Commit Changes
gb.fileNotMergeable = Unable to commit {0}.  This file can not be automatically merged.
gb.fileCommitted = Successfully committed {0}.
gb.deletePatchset = Delete Patchset {0}
gb.deletePatchsetSuccess = Deleted Patchset {0}.
gb.deletePatchsetFailure = Error deleting Patchset {0}.
gb.referencedByCommit = Referenced by commit.
gb.referencedByTicket = Referenced by ticket.
gb.emailClientCertificateSubject = Your Gitblit client certificate for {0}
