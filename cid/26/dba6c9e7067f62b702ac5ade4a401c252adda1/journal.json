[
{"id":"e79e7f4ad622fbd2e5f77d68a906eef52a5dcb9a","createdAt":"2014-01-13T03:55:39Z","createdBy":"james","fields":[{"field":"number","value":1},{"field":"changeId","value":"I26dba6c9e7067f62b702ac5ade4a401c252adda1"},{"field":"title","value":"Tickets module with patchset contributions"},{"field":"body","value":"A basic issue tracker styled as a hybrid of Github and Bitbucket issues.\nYou may attach commits to an existing ticket or you can push a single\ncommit to create a *proposal* ticket.  The title and body of the commit\nmessage become the subject and description of the proposal ticket.\n\nTicket tracker\n--------------\n\nThe ticket tracker stores tickets as an append-only JSON journal in an\norphan branch within each repository.  The journals are deserialized,\nand a ticket is built by applying the journal entries.  Tickets are\nindexed using Apache Lucene and all queries and searches are executed\nagainst this Lucene index.\n\nThere is one trade-off to this persistence design: it is non-relational.\n\nWhat does that mean?  Gitblit stores user accounts within it\u0027s simple\n`users.conf` file.  Users are identified by their username.  The\nusername is also the attribution hard-coded into each journal entry\n(patchset revision, field changes, comment, etc).  If the username\nchanges in `users.conf`, the ticket data will not reflect that because\nit is non-relational.\n\nHere are a few reasons/justifications for this design choice:\n\n1. commit identifications (author, committer, tagger) are non-relational\n2. allows meaningful and complete ticket data to be distributed with the\nrepository\n3. your favorite text editor can still be your administration tool\n\nThis combination of technologies allows Gitblit to continue to operate\nwithout introducing an external persistence technology such as an SQL\ndatabase or a NoSQL store.\n\nHaving said that, the backend to the ticket tracker is pluggable and\nthere is a mostly complete Redis backend as a proof-of-concept.  For\nthose inclined, it should be relatively straight-forward to develop\nother backends (H2, MongoDB, etc) as long as the journal design is\npreserved.\n\nPushing Commits\n---------------\n\nEach push to a ticket is identified as a patchset revision and flagged\nwith a revision ref.  A patchset revision may build on the previous\npatchsets (traditional fast-forward push) OR a patchset revision may\nrewrite history (rebase, squash, rebase+squash, or amend).  Patchset\nauthors should not be afraid to polish, revise, and rewrite their code\nbefore merging into the proposed branch.\n\nGitblit will create n+1 refs for each ticket, where n is the patchset\nrevision count.  These refs are `refs/ticket/{id}`, which are typically\nused for pushing and pulling, and`refs/changes/{x}/{id}/{rev}` which\nmark each pushed patchset revision.\n\n**Normal collaboration workflow**\n\nPatchsets for existing tickets should be pushed to: `refs/tickets/{id}`\nwhere id is the integer ticket id.\n\n    git push origin HEAD:refs/tickets/123\n\n**Proposing a new change**\n\nYou may also create a new change proposal ticket just by pushing a\n**single commit** to `refs/for/{branch}` where branch is the proposed\nintegration branch OR `refs/for/default` which specifies the default\nintegration branch configured for the repository.\n\n    git push origin HEAD:refs/for/default\n\n**Rebasing, Squashing, Amending**\n\nGitblit makes rebasing, squashing, and amending patchsets easy.  Because\nGitblit tracks the current patchset revision with `refs/ticket/{id}`,\npushing to that commit may result in a failure if a new revision is a\nnon-fast-forward push.  Only user\u0027s with (rewind) RW+ permission to the\nrepository can push a non-fast-forward update to `refs/tickets/{id}`.\n\nThere is an alternate ref that can be used by one of the patchset\nauthors or repository users with write (RW) access which will allow them\nto rewrite a patchset.\n\n    git push origin HEAD:refs/for/{id}"},{"field":"status","value":"New"},{"field":"type","value":"Proposal"},{"field":"mergeTo","value":"master"},{"field":"createdBy","value":"james"}],"patch":{"rev":1,"tip":"26dba6c9e7067f62b702ac5ade4a401c252adda1","base":"814e248354ed9b234c59e3470ef363f705bf711a","insertions":12009,"deletions":281,"totalCommits":1,"addedCommits":0,"type":"Proposal","ref":"refs/changes/01/1/1"}}
]