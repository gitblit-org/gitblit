[{"date":"2014-05-02T13:56:48Z","author":"james","fields":{"title":"Consider HotFix support for git-flow","body":"When you are working with git-flow [1], there are times when you need to merge a hotfix into the stable branch and also into the active development branch.  It would be really convenient if there was consideration for this use-case in Gitblit.\n\nOne possibility is to implement an automatic, semantic-versioning-based merge mechanism as a plugin.  This would essentially be what Stash offers [2].\n\nAnother approach would be to create a *hotfix* ticket which allowed you to merge the patchset of a ticket into multiple target branches.  The *hotfix* ticket branch would be required to have a merge base in the stable branch - i.e. you could not hotfix the *develop* branch.  This may require teaching Gitblit more about the git-flow workflow.\n\n- [1] http://nvie.com/posts/a-successful-git-branching-model\n- [2] https://confluence.atlassian.com/display/STASH/Automatic+branch+merging","topic":"workflows","type":"Enhancement","responsible":"james","milestone":"v1.6.0","mergeTo":"develop","watchers":"+james","status":"New"}},{"date":"2014-05-29T17:20:27Z","author":"james","fields":{"title":"Make Git-flow simple with branches and tickets","body":"**Hotfix Tickets**\n\nWhen you are working with git-flow [1], there are times when you need to merge a hotfix into the stable branch and also into the active development branch.  It would be really convenient if there was consideration for this use-case in Gitblit.\n\nOne possibility is to implement an automatic, semantic-versioning-based merge mechanism as a plugin.  This would essentially be what Stash offers [2].\n\nAnother approach would be to create a *hotfix* ticket which allowed you to merge the patchset of a ticket into multiple target branches.  The *hotfix* ticket branch would be required to have a merge base in the stable branch - i.e. you could not hotfix the *develop* branch.  This may require teaching Gitblit more about the git-flow workflow.\n\n**Release branches from Milestones**\n\nAnother idea is to manage the release branch from creation, to merging \u0026 tagging based on a milestone.\n\n1. create milestone *v1.2.3*\n2. commit \u0026 merge several tickets to *develop* assigned to milestone *v1.2.3*\n3. create *release-v1.2.3* branch off of *develop* from the *v1.2.3* milestone\n4. commit \u0026 merge any new tickets to *release-v1.2.3*\n5. merge *release-v1.2.3* to *master* and tag as *v1.2.3*\n6. merge *release-v1.2.3* to *develop*\n7. delete *release-v1.2.3*\n\n\n- [1] http://nvie.com/posts/a-successful-git-branching-model\n- [2] https://confluence.atlassian.com/display/STASH/Automatic+branch+merging","topic":"git-flow","milestone":"v1.7.0"}}]