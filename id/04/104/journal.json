[{"date":"2014-06-16T13:26:07Z","author":"davido","fields":{"title":"Tickets: Implement different submit strategies per repository base","body":"Change Submit Action\n---------------------------------\n\nRepository owner should be able to change the method used\nto submit a ticket to a repository through the repository page.\n\nThe following methods are supported:\n\n* Fast Forward Only\n\nThis method produces a strictly linear history.  All merges must\nbe handled on the client, prior to uploading to GitBlit for review.\n\nTo submit a change, the change must be a strict superset of the\ndestination branch.  That is, the change must already contain the\ntip of the destination branch at submit time.\n\n* Merge If Necessary (default for a new repository)\n\nIf the change being submitted is a strict superset of the destination\nbranch, then the branch is fast-forwarded to the change.  If not,\nthen a merge commit is automatically created.  This is identical\nto the classical `git merge` behavior, or `git merge --ff`.\n\n* Always Merge\n\nAlways produce a merge commit, even if the change is a strict\nsuperset of the destination branch.  This is identical to the\nbehavior of `git merge --no-ff`, and may be useful if the\nproject needs to follow submits with `git log --first-parent`.\n\n* Cherry Pick\n\nAlways cherry pick the patch set, ignoring the parent lineage\nand instead creating a brand new commit on top of the current\nbranch head.\n\nWhen cherry picking a change, GitBlit automatically appends onto the\nend of the commit message a short summary of the change\u0027s approvals,\nand a URL link back to the change on the web.  The committer header\nis also set to the submitter, while the author header retains the\noriginal patch set author.\n\n* Rebase If Necessary\n\nIf the change being submitted is a strict superset of the destination\nbranch, then the branch is fast-forwarded to the change.  If not,\nthen the change is automatically rebased and then the branch is\nfast-forwarded to the change.\n\nWhen GitBlit tries to do a merge, by default the merge will only\nsucceed if there is no path conflict.  A path conflict occurs when\nthe same file has also been changed on the other side of the merge.\n\nIf `Automatically resolve conflicts` on repository page is enabled,\nGitBlit will try to do a content merge when a path conflict occurs.","topic":"tickets-submit-strategies","type":"Enhancement","mergeTo":"develop","watchers":"+davido","status":"New"}},{"date":"2014-06-16T13:28:16Z","author":"davido","fields":{"body":"Ticket Submit Action\n---------------------------------\n\nRepository owner should be able to change the method used\nto submit a ticket to a repository through the repository page.\n\nThe following methods are supported:\n\n* Fast Forward Only\n\nThis method produces a strictly linear history.  All merges must\nbe handled on the client, prior to uploading to GitBlit for review.\n\nTo submit a change, the change must be a strict superset of the\ndestination branch.  That is, the change must already contain the\ntip of the destination branch at submit time.\n\n* Merge If Necessary (default for a new repository)\n\nIf the change being submitted is a strict superset of the destination\nbranch, then the branch is fast-forwarded to the change.  If not,\nthen a merge commit is automatically created.  This is identical\nto the classical `git merge` behavior, or `git merge --ff`.\n\n* Always Merge\n\nAlways produce a merge commit, even if the change is a strict\nsuperset of the destination branch.  This is identical to the\nbehavior of `git merge --no-ff`, and may be useful if the\nproject needs to follow submits with `git log --first-parent`.\n\n* Cherry Pick\n\nAlways cherry pick the patch set, ignoring the parent lineage\nand instead creating a brand new commit on top of the current\nbranch head.\n\nWhen cherry picking a change, GitBlit automatically appends onto the\nend of the commit message a short summary of the change\u0027s approvals,\nand a URL link back to the change on the web.  The committer header\nis also set to the submitter, while the author header retains the\noriginal patch set author.\n\n* Rebase If Necessary\n\nIf the change being submitted is a strict superset of the destination\nbranch, then the branch is fast-forwarded to the change.  If not,\nthen the change is automatically rebased and then the branch is\nfast-forwarded to the change.\n\nWhen GitBlit tries to do a merge, by default the merge will only\nsucceed if there is no path conflict.  A path conflict occurs when\nthe same file has also been changed on the other side of the merge.\n\nIf `Automatically resolve conflicts` on repository page is enabled,\nGitBlit will try to do a content merge when a path conflict occurs."}}]